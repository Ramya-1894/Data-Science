# Tuple Creation:-Create a tuple named my_tuple containing at least five different elements (mix of integers, strings, and a float).Print the tuple.
my_tuple = (10, "apple", 3.14, "banana", 42)
print(my_tuple)

# Accessing Elements:-Print the first and last element of my_tuple using indexing.Use negative indexing to access the second last element.
print("First element:", my_tuple[0])
print("Last element:", my_tuple[-1])
print("Second last element:", my_tuple[-2])

# Tuple Slicing:-Slice and print the first three elements of my_tuple.Slice and print the last two elements.
print("First three elements:", my_tuple[:3])
print("Last two elements:", my_tuple[-2:])

# Tuple Operations:-Concatenate my_tuple with another tuple and print the result.Repeat my_tuple twice and print the result.
another_tuple = (99, "orange")
concatenated = my_tuple + another_tuple
print("Concatenated tuple:", concatenated)

repeated = my_tuple * 2
print("Repeated tuple:", repeated)

# Tuple Methods:-Find the index of a specific element in my_tuple and print it.Count the occurrences of a specific element in my_tuple and print it.
print("Index of 'banana':", my_tuple.index("banana"))
print("Count of 10:", my_tuple.count(10))

# Tuple Immutability:-ry changing one element in my_tuple and observe the result.Explain why tuples are immutable.
try:
    my_tuple[1] = "grape"  
except TypeError as e:
    print("Error when trying to change a tuple element:", e)
    print("Explanation: Tuples are immutable, meaning their elements cannot be changed after creation.")

# Tuple Packing and Unpacking:-Create a tuple with three elements and unpack them into individual variables.Print the unpacked values.
packed_tuple = ("John", 25, "Engineer")
name, age, profession = packed_tuple
print("Unpacked values:")
print("Name:", name)
print("Age:", age)
print("Profession:", profession)

# Tuple Iteration:-Use a loop to iterate through my_tuple and print each element.
print("Iterating through my_tuple:")
for item in my_tuple:
    print(item)

# Tuple Usage:-Write a function that returns multiple values using a tuple.Call the function and print the returned tuple.
def get_student_info():
    name = "Alice"
    age = 20
    grade = "A"
    return (name, age, grade)

student_info = get_student_info()
print("Returned tuple from function:", student_info)
